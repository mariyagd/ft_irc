!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BLUE	Makefile	/^BLUE = \\033[1;34m$/;"	m
CPPF	Makefile	/^CPPF = c++ -Wall -Werror -Wextra -std=c++98 -g$/;"	m
END	Makefile	/^END	 = \\033[0m$/;"	m
IRC_HPP	Irc.hpp	/^# define IRC_HPP$/;"	d
MAX_CONNECTIONS	Irc.hpp	/^# define MAX_CONNECTIONS /;"	d
NAME	Makefile	/^NAME = ircserv$/;"	m
RM	Makefile	/^RM = rm -f$/;"	m
SERVER_HPP	Server.hpp	/^# define SERVER_HPP$/;"	d
SRCS	Makefile	/^SRCS = main.cpp  Server.cpp$/;"	m
Server	Server.cpp	/^Server::Server(int port, char *password) : _port(port), _password(password)$/;"	f	class:Server
Server	Server.hpp	/^class Server {$/;"	c
Server	test.cpp	/^    Server() {$/;"	f	class:Server
Server	test.cpp	/^class Server {$/;"	c	file:
ServerException	Server.cpp	/^Server::ServerException::ServerException( const char *error_msg ) : _error_msg(error_msg) {$/;"	f	class:Server::ServerException
ServerException	Server.hpp	/^	class ServerException : public std::exception {$/;"	c	class:Server
_error_msg	Server.hpp	/^		const char *				_error_msg;$/;"	m	class:Server::ServerException
_fileDescriptor	test.cpp	/^    int _fileDescriptor; \/\/ Exemple de descripteur de fichier$/;"	m	class:Server	file:
_hints	Server.hpp	/^	struct addrinfo 		_hints, *_servinfo;	\/\/ for getaddrinfo()$/;"	m	class:Server	typeref:struct:Server::addrinfo
_instance	test.cpp	/^    static Server* _instance;$/;"	m	class:Server	file:
_instance	test.cpp	/^Server* Server::_instance = nullptr;$/;"	m	class:Server	file:
_password	Server.hpp	/^	const char *			_password;$/;"	m	class:Server
_port	Server.hpp	/^	int						_port;$/;"	m	class:Server
_servSock	Server.hpp	/^	int						_servSock;				\/\/ for socket()$/;"	m	class:Server
_server_address	Server.hpp	/^	struct sockaddr_in		_server_address;		\/\/ for bind()$/;"	m	class:Server	typeref:struct:Server::sockaddr_in
_servinfo	Server.hpp	/^	struct addrinfo 		_hints, *_servinfo;	\/\/ for getaddrinfo()$/;"	m	class:Server	typeref:struct:Server::
accept	Server.cpp	/^void	Server::accept()$/;"	f	class:Server
addrlen	Server.hpp	/^	socklen_t				addrlen;$/;"	m	class:Server
all_connections	Server.hpp	/^	int						all_connections[MAX_CONNECTIONS];$/;"	m	class:Server
bind	Server.cpp	/^void	Server::bind()$/;"	f	class:Server
getProtocolFamilyName	Server.cpp	/^std::string	Server::getProtocolFamilyName(int family)$/;"	f	class:Server
get_addrinfo	Server.cpp	/^void	Server::get_addrinfo()$/;"	f	class:Server
handleSignal	test.cpp	/^    void handleSignal(int signum) {$/;"	f	class:Server	file:
handler	main.cpp	/^void	handler(int sig_code)$/;"	f
launch	Server.cpp	/^void	Server::launch()$/;"	f	class:Server
listen	Server.cpp	/^void	Server::listen()$/;"	f	class:Server
main	main.cpp	/^int	main( int ac, char **av )$/;"	f
main	test.cpp	/^int main() {$/;"	f
new_addr	Server.hpp	/^	struct sockaddr_storage	new_addr;$/;"	m	class:Server	typeref:struct:Server::sockaddr_storage
new_fd	Server.hpp	/^	int						new_fd;$/;"	m	class:Server
read_fd_set	Server.hpp	/^	fd_set					read_fd_set;$/;"	m	class:Server
server_instance	Server.hpp	/^	static Server *server_instance ;$/;"	m	class:Server
shutdown	Server.cpp	/^void Server::shutdown()$/;"	f	class:Server
sig_handler	main.cpp	/^void	sig_handler( Server & server )$/;"	f
signalHandler	test.cpp	/^    static void signalHandler(int signum) {$/;"	f	class:Server
socket	Server.cpp	/^void	Server::socket()$/;"	f	class:Server
start	test.cpp	/^    void start() {$/;"	f	class:Server
what	Server.cpp	/^const char *Server::ServerException::what() const throw()$/;"	f	class:Server::ServerException
~Server	Server.cpp	/^Server::~Server()$/;"	f	class:Server
